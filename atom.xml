<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Dragon&#39;s Blog</title>
  
  <subtitle>Quick Notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.typo.red/"/>
  <updated>2020-02-17T01:00:59.599Z</updated>
  <id>http://blog.typo.red/</id>
  
  <author>
    <name>Zac</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://blog.typo.red/2020/02/15/hello-world/"/>
    <id>http://blog.typo.red/2020/02/15/hello-world/</id>
    <published>2020-02-15T14:38:28.789Z</published>
    <updated>2020-02-17T01:00:59.599Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Talk about BlockCanary</title>
    <link href="http://blog.typo.red/2016/01/21/talk-about-blockcanary/"/>
    <id>http://blog.typo.red/2016/01/21/talk-about-blockcanary/</id>
    <published>2016-01-21T15:00:00.000Z</published>
    <updated>2020-02-16T15:23:57.687Z</updated>
    
    <content type="html"><![CDATA[<p>前一段时间在微博上有人分享了一个透明检测应用卡顿方法的文章<a href="http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/" target="_blank" rel="noopener">（原文连接）</a>。我并没有急着去看文章的内容，而是先自己想一想，能否很快的在头脑中给出一个类似的解决方案。当然结果是并没有，哈哈，不过昨天文章的作者开源了相应的代码实现<a href="https://github.com/moduth/blockcanary" target="_blank" rel="noopener">（源代码）</a>，今天就来好好分析学习一下。</p><a id="more"></a><h1 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h1><p>首先给出代码结构，不包含其中的资源部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── com</span><br><span class="line">    └── github</span><br><span class="line">        └── moduth</span><br><span class="line">            └── blockcanary</span><br><span class="line">                ├── BlockCanary.java</span><br><span class="line">                ├── BlockCanaryContext.java</span><br><span class="line">                ├── BlockListener.java</span><br><span class="line">                ├── LooperPrinter.java</span><br><span class="line">                ├── info</span><br><span class="line">                │   ├── CpuSampler.java</span><br><span class="line">                │   └── ThreadStackSampler.java</span><br><span class="line">                ├── log</span><br><span class="line">                │   ├── Block.java</span><br><span class="line">                │   ├── BlockCanaryInternals.java</span><br><span class="line">                │   ├── LogWriter.java</span><br><span class="line">                │   ├── PerformanceUtils.java</span><br><span class="line">                │   ├── ProcessUtils.java</span><br><span class="line">                │   └── UploadMonitorLog.java</span><br><span class="line">                └── ui</span><br><span class="line">                    ├── BlockDetailAdapter.java</span><br><span class="line">                    ├── DisplayBlockActivity.java</span><br><span class="line">                    ├── DisplayLeakConnectorView.java</span><br><span class="line">                    ├── LeakCanaryUi.java</span><br><span class="line">                    └── MoreDetailsView.java</span><br></pre></td></tr></table></figure><p>层次结构很清晰，只要明白了实现原理之后，理解起来就简单明了了。</p><h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><h2 id="自定义上下文"><a href="#自定义上下文" class="headerlink" title="自定义上下文"></a>自定义上下文</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppBlockCanaryContext</span> <span class="keyword">extends</span> <span class="title">BlockCanaryContext</span> </span>&#123;</span><br><span class="line">  <span class="comment">// override to provide context like app qualifier, uid, network type, block threshold, log save path</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// this is default block threshold, you can set it by phone's performance</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getConfigBlockThreshold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">500</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// if set true, notification will be shown, else only write log file</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNeedDisplay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> BuildConfig.DEBUG;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// path to save log file</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getLogPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/blockcanary/performance"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BlockCanaryContext</code>中主要提供一个配置参数和客户端信息，提供给日志使用，需要自定义实现。</p><h2 id="在-Application-中初始化并启动"><a href="#在-Application-中初始化并启动" class="headerlink" title="在 Application 中初始化并启动"></a>在 Application 中初始化并启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Do it on main process</span></span><br><span class="line">    BlockCanary.install(<span class="keyword">this</span>, <span class="keyword">new</span> AppBlockCanaryContext()).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你的应用是多进程的实现，初始化时一定要留意。如果应用中将执行耗时操作的<code>Service</code>配置到单独的进程中，那在<code>Application</code>中初始化时需要考虑清楚是否在<code>Service</code>的进程中初始化，因为一般的<code>Service</code>的操作也是在主线程执行的，不应该算在<code>UI</code>界面的性能考虑范围内。</p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><h2 id="从哪下手"><a href="#从哪下手" class="headerlink" title="从哪下手"></a>从哪下手</h2><p>在<code>Looper</code>的<code>loop</code>方法中有如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Printer logging = me.mLogging;</span><br><span class="line"><span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">  logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                  msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msg.target.dispatchMessage(msg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">  logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dispatchMessage</code>方法调用前后，有一个打印的日志的方法可以<code>hook</code>，<code>BlockCanary</code>就是利用这个方式实现的。</p><p>具体实现就是获取主线程的消息处理耗时，与自定义<code>BlockCanaryContext</code>中配置的<code>BlockThreshold</code>做比较，如果超过阻塞阀值，就调用<code>BlockListener</code>获取设备和应用的环境信息。</p><h2 id="胡克-println-方法"><a href="#胡克-println-方法" class="headerlink" title="胡克 println 方法"></a>胡克 println 方法</h2><p>接下来看看<code>BlockCanary</code>是怎么样胡克的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String x)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!mStartedPrinting) &#123;</span><br><span class="line">    mStartTimeMillis = System.currentTimeMillis();</span><br><span class="line">    mStartThreadTimeMillis = SystemClock.currentThreadTimeMillis();</span><br><span class="line">    mStartedPrinting = <span class="keyword">true</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">    mStartedPrinting = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (isBlock(endTime)) &#123;</span><br><span class="line">      notifyBlockEvent(endTime);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>dispatchMessage</code>之前，会调用<code>println</code>方法，记录下当前系统时间，当前线程运行时间，后面判断<code>block</code>时会用到。</p><p>因为在<code>Looper</code>的<code>loop</code>方法的<code>dispatchMessage</code>前后都有调用<code>println</code>方法，这里加了一个标志位做判断。确认<code>block</code>之后，就会回调<code>BlockEvent</code>。</p><h2 id="Block-通知"><a href="#Block-通知" class="headerlink" title="Block 通知"></a>Block 通知</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">notifyBlockEvent</span><span class="params">(<span class="keyword">final</span> <span class="keyword">long</span> endTime)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> startTime = mStartTimeMillis;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> startThreadTime = mStartThreadTimeMillis;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">long</span> endThreadTime = SystemClock.currentThreadTimeMillis();</span><br><span class="line">  BlockCanaryContext.get().getWriteLogFileThreadHandler().post(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      mBlockListener.onBlockEvent(startTime, endTime, startThreadTime, endThreadTime);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信息收集和后续处理"><a href="#信息收集和后续处理" class="headerlink" title="信息收集和后续处理"></a>信息收集和后续处理</h2><p>在非主线程回调<code>onBlockEvent</code>方法，做一些信息收集，日志上传，提示的工作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBlockEvent</span><span class="params">(<span class="keyword">long</span> realTimeStart, <span class="keyword">long</span> realTimeEnd, <span class="keyword">long</span> threadTimeStart, <span class="keyword">long</span> threadTimeEnd)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 查询这段时间内的线程堆栈调用情况，CPU使用情况</span></span><br><span class="line">  ArrayList&lt;String&gt; threadStackEntries = mThreadStackSampler.getThreadStackEntries(realTimeStart, realTimeEnd);</span><br><span class="line">  <span class="comment">// Log.d("BlockCanary", "threadStackEntries: " + threadStackEntries.size());</span></span><br><span class="line">  <span class="keyword">if</span> (threadStackEntries.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Block block = Block.newInstance()</span><br><span class="line">    .setMainThreadTimeCost(realTimeStart, realTimeEnd, threadTimeStart, threadTimeEnd)</span><br><span class="line">    .setCpuBusyFlag(mCpuSampler.isCpuBusy(realTimeStart, realTimeEnd))</span><br><span class="line">    .setRecentCpuRate(mCpuSampler.getCpuRateInfo())</span><br><span class="line">    .setThreadStackEntries(threadStackEntries)</span><br><span class="line">    .flushString();</span><br><span class="line">  LogWriter.saveLooperLog(block.toString());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (BlockCanaryContext.get().isNeedDisplay()) &#123;</span><br><span class="line">    Context context = BlockCanaryContext.get().getContext();</span><br><span class="line">    PendingIntent pendingIntent = DisplayBlockActivity.createPendingIntent(context, block.timeStart);</span><br><span class="line">    String contentTitle = context.getString(R.string.block_canary_class_has_blocked, block.timeStart);</span><br><span class="line">    String contentText = context.getString(R.string.block_canary_notification_message);</span><br><span class="line">    BlockCanary.<span class="keyword">this</span>.notify(contentTitle, contentText, pendingIntent);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取<code>CPU</code>信息，线程栈信息，保存到日志文件中，展示到界面上。</p><p>在<code>CpuSampler</code>中，每间隔一秒钟去读取<code>/proc/stat</code>和<code>/proc/{pid}/stat</code>中的信息进行分析，获取系统<code>CPU</code>使用情况，和当前进程的<code>CPU</code>使用情况。在<code>ThreadStackSampler</code>中每隔三秒去收集一次线程的调用栈。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>思路很新颖，实际的使用结果还是需要在项目中实践之后才能体会到。另外就是时间阀值的设置问题，不同的设备性能不一样，怎么样去控制阀值有点难把握。在<code>GitHub</code>上看到有人建议使用<code>Choreographer</code>去检测跳帧的情况，我觉得应该也是一个不错的思路，有时间的话好好研究一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一段时间在微博上有人分享了一个透明检测应用卡顿方法的文章&lt;a href=&quot;http://blog.zhaiyifan.cn/2016/01/16/BlockCanaryTransparentPerformanceMonitor/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;（原文连接）&lt;/a&gt;。我并没有急着去看文章的内容，而是先自己想一想，能否很快的在头脑中给出一个类似的解决方案。当然结果是并没有，哈哈，不过昨天文章的作者开源了相应的代码实现&lt;a href=&quot;https://github.com/moduth/blockcanary&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;（源代码）&lt;/a&gt;，今天就来好好分析学习一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://blog.typo.red/categories/Android/"/>
    
    
      <category term="Opensource" scheme="http://blog.typo.red/tags/Opensource/"/>
    
  </entry>
  
</feed>
